---
const { terms } = Astro.props;
const categories = new Set<string>();
    
terms.forEach((term: any) => {
  // fetch all categories
  term.data.categories.forEach((category: string) => categories.add(category))
});

---
<hero-com data> 
<div class="hero-section">
  <div class="search-and-filter">
    <div class="search-bar">
      <i class="fas fa-search"></i>
      <input  autocomplete="off" type="text" id="searchInput" class="form-control" placeholder="Search for keywords..." />
      <div id="autocomplete-list"></div> 
    </div>
    <div class="category-filter">
      <select class="select" id="category-select">
        <option value="" disabled selected hidden>Category</option>
        <option value="">(None)</option>
        {
          Array.from(categories).map(category => (
            <option value={category}>{category}</option>
          ))
        }
      </select>
    </div>
  </div>

  <div class="buttons" id="heroButtons">
    <button class="button" id="aboutButton">
      <i class="fas fa-user" style="padding-right: 10px;"></i> About;
    </button>
    <button class="button" onclick="window.open('https://github.com/Buzzpy/Programming-Simplified', '_blank')">
      <i class="fab fa-github" style="padding-right: 10px;"></i> Contribute;
    </button>

    <button class="button" id="darkModeToggle">
      <i class="fas fa-moon" style="padding-right: 10px;"></i><span id="darkModeText"> Dark Mode;</span>
    </button>
    
    <button class="button" id="builderButton">
      <i class="fas fa-hammer" style="padding-right: 10px;"></i> Builder's Note;
    </button>
    
    <button class="button" id="sponsorButton">
      <i class="fa-solid fa-dollar-sign" style="padding-right: 10px;"></i> Sponsor;
    </button>
  </div>
  
  <div class="hero-title" id="heroTitle" style="padding-top: 50px;">Dev Encyclopedia;</div>
  <div class="hero-paragraph" id="heroParagraph">Find out what that Sr. Developer is talking about.</div>
</div>
  
<!-- Modal Structure (should be present in your main layout or index.astro) -->
<div id="modal">
  <div id="modal-content">
    <div id="modal-body"></div>
  </div>
</div>

</hero-com>

<script>

  class Hero extends HTMLElement {
    constructor(){
      super();

      const select = this.querySelector('#category-select');
      const searchInput : HTMLInputElement | null = this.querySelector('#searchInput');
      const autocompleteList : HTMLElement | null = document.querySelector('#autocomplete-list');
      const cards = document.querySelectorAll('.card');

      if (!select || !searchInput || !autocompleteList || !cards){
        console.log("Error, element(s) not found");
        return;
      }

      function filterByCategory(selectedCategory: string, cardCategories: string[]){
          if (selectedCategory === "") return true;

          return cardCategories.includes(selectedCategory);
        }

      select.addEventListener('change', event => {
        const selectedCategory = (event.target as HTMLOptionElement).value;
        searchInput.value = '';

        if (selectedCategory === "") {
          cards.forEach((card: HTMLElement) => card.style.display = '');
          return;
        }
        for (let i = 0; i < cards.length; i++) {
            const cardCategories = cards[i]!.getAttribute('data-categories')!.split(", ");
            if (cardCategories.includes(selectedCategory)) {
              (cards[i] as HTMLElement).style.display = '';
            }
            else {
              (cards[i] as HTMLElement).style.display = 'none';
            }
        }
      });


      let currentFocus = -1; // Track the currently focused item in the autocomplete list

      
      const maxItems = 5;

      searchInput.addEventListener('input', function() {
          const input = this.value;
          const selectedCategory = (select as HTMLSelectElement).value;
          autocompleteList.innerHTML = '';
          currentFocus = -1;

          if (!input) {
              return;
          }

          let itemCount = 0;

          for (let i = 0; i < cards.length; i++) {
            if (itemCount >= maxItems) {
                  return;
              }
              const cardTitle = (cards[i]!.getAttribute('data-title') as string);
              const cardCategories = cards[i]!.getAttribute('data-categories')!.split(", ");
              const regex = new RegExp(`(${input})`, 'gi');
              const highlightedKeyword = cardTitle.replace(regex, `<span class="highlight">$1</span>`);

              if (cardTitle.toLowerCase().includes(input.toLowerCase()) && filterByCategory(selectedCategory, cardCategories)) {
                  const item = document.createElement('div');
                  item.classList.add('autocomplete-item', 'list-group-item', 'list-group-item-action');
                  item.innerHTML = highlightedKeyword;
                  item.addEventListener('click', function() {
                    searchInput.value = cardTitle;
                    autocompleteList.innerHTML = '';
                      filterCards();
                      searchInput.focus();
                  });
                  autocompleteList.appendChild(item);
                  itemCount++;
              }
          }

          autocompleteList.classList.add('list-group', 'shadow', 'position-absolute', 'w-100', 'mt-1');

          if (itemCount > maxItems) {
              autocompleteList.style.maxHeight = `${maxItems * 38}px`;
              autocompleteList.style.overflowY = 'auto';
          } else {
              autocompleteList.style.maxHeight = '';
              autocompleteList.style.overflowY = '';
          }
      });

      // Add keyboard navigation for the autocomplete
      searchInput.addEventListener('keydown', function(e) {
          const items = autocompleteList.getElementsByClassName('autocomplete-item') as HTMLCollectionOf<HTMLElement>;
          if (e.key === 'ArrowDown') {
              currentFocus++;
              addActive(items);
          } else if (e.key === 'ArrowUp') {
              currentFocus--;
              addActive(items);
          } else if (e.key === 'Enter') {
              e.preventDefault();
              if (currentFocus > -1 && items[currentFocus]) {
                  (items[currentFocus] as HTMLElement).click();
              }
          }
      });

      function addActive(items: HTMLCollectionOf<HTMLElement>) {
          if (!items) return false;
          removeActive(items);
          if (currentFocus >= items.length) currentFocus = 0;
          if (currentFocus < 0) currentFocus = items.length - 1;
          (items[currentFocus] as HTMLElement).classList.add('active');
      }

      function removeActive(items: HTMLCollectionOf<HTMLElement>) {
          for (let i = 0; i < items.length; i++) {
              (items[i] as HTMLElement).classList.remove('active');
          }
      }

      document.addEventListener('click', function(e) {
          if (e.target !== searchInput) {
              autocompleteList.innerHTML = '';
          }
      });

      searchInput.addEventListener('keyup', filterCards);

      function filterCards() {
          const filter = searchInput!.value.toLowerCase();
          const selectedCategory = (select as HTMLSelectElement).value;


          for (let i = 0; i < cards.length; i++) {
            const cardTitle = (cards[i]!.getAttribute('data-title') as string).toLowerCase();
            const cardCategories = cards[i]!.getAttribute('data-categories')!.split(", ");

              if (cardTitle.indexOf(filter) > -1 && filterByCategory(selectedCategory, cardCategories)) {
                  (cards[i] as HTMLElement).style.display = '';
              } else {
                  (cards[i] as HTMLElement).style.display = 'none';
              }
          }
      }
      }
    }
    customElements.define('hero-com', Hero);
</script>

<script is:inline src="/hero-action.js"></script>
 